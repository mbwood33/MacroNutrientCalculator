@*  WeightTracker.razor
    ---------------------------------------------------------------------------
    This is the Weight Tracker page for the site. It allows the user to track
    their weight, optionally their body fat %, and displays the results on
    graphs for body weight over time, body fat over time, and body composition
    over time. *@

@page "/weight-tracker"

@using MacroNutrientCalc.Models
@using MacroNutrientCalc.Services
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor.Navigations

@inject DatabaseService dbService       /* For database operations */
@inject NavigationManager Navigation    /* For navigation if needed */
@inject UserSessionService userSessionService   /* Provides the logged-in user's info */

<PageTitle>Weight Tracker</PageTitle>

<style>
    /* Background gradient for the Header */
    .gradient-bg {
    background: linear-gradient(to right, #007bff, #6c757d);
    color: white;
    }

    /* Custom Shadow for buttons and inputs */
    .custom-shadow {
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.2);
    transition: box-shadow 0.3s ease-in-out;
    }

    /* Hover effect to enhance shadow on buttons */
    .custom-shadow:hover {
    box-shadow: 0px 6px 12px rgba(0, 0, 0, 0.4);
    }
</style>

<!-- Header Section -->
<div class="gradient-bg p-3">
    <h1 class="text-center fw-bold">Weight Tracker</h1>
    <p class="text-white text-center fst-italic">
        Track your weight, body fat percentage, and lean mass
    </p>
</div>

<!-- Log Your Weight section -->
<div class="mt-4">
    <h4>Log Your Weight</h4>

    <!-- Form for submitting weight logs -->
    <EditForm Model="CurrentLog" OnValidSubmit="LogWeight">
        <!-- Form with Validation -->
        <DataAnnotationsValidator />
        <ValidationSummary />

        <!-- First Row: Timestamp, Weight, and Body Fat Percentage Fields -->
        <div class="row g-3 mt-3">
            <div class="col-md-6">
                <label for="timestamp" class="form-label">Timestamp:</label>
                <SfDateTimePicker TValue="DateTime" @bind-Value="CurrentLog.Timestamp" Placeholder="Select date and time" CssClass="form-control shadow" />
                <ValidationMessage For="@(() => CurrentLog.Timestamp)" />
            </div>
            <div class="col-md-6">
                <label for="weight" class="form-label">Weight (lbs):</label>
                <SfNumericTextBox TValue="double?" @bind-Value="CurrentLog.Weight" id="weight" Placeholder="Enter weight" ShowSpinButton="false" CssClass="form-control shadow" />
                <ValidationMessage For="@(() => CurrentLog.Weight)" />
            </div>
            <div class="col-md-6">
                <label for="body-fat" class="form-label">Body Fat Percentage (%):</label>
                <SfNumericTextBox TValue="double?" @bind-Value="CurrentLog.BodyFatPercentage" id="body-fat" Placeholder="Optional" ShowSpinButton="false" CssClass="form-control shadow" />
                <ValidationMessage For="@(() => CurrentLog.BodyFatPercentage)" />
            </div>
        </div>

        <!-- Display the stored height from the user profile -->
        <div class="alert alert-info mt-3">
            Using stored height: @(currentUserHeight?.ToString() ?? "Not available")
        </div>

        <!-- Submit Button Row -->
        <div class="row-cols-3 g-3 mt-3">
            <div class="col-md-6">
                <SfButton IsPrimary="true" CssClass="btn btn-primary custom-shadow">
                    Log
                </SfButton>
            </div>
        </div>
    </EditForm>

    <!-- Range Selector Section -->
    <div class="mt-4">
        <div class="row g-3 mb-3">
            <div class="col-md-4">
                <label for="range" class="form-label">Select Range</label>
                <SfDropDownList
                TValue="string"
                TItem="string"
                DataSource="@RangeOptions"
                Value="@SelectedRange"
                ValueChanged="@( (string newVal) => SelectedRange = newVal )"
                ValueExpression="@(() => SelectedRange)"
                Placeholder="Select Range"
                CssClass="form-control shadow mb-3" />
            </div>
        </div>
    </div>

    <!-- Section for Displaying Weight Logs -->
    <div class="mt-4">
        <h4>Your Logs</h4>

        <!-- Syncfusion Data Grid for displaying the weight logs -->
        <SfGrid DataSource="@FilteredLogs" AllowSorting="true" AllowPaging="true">
            <GridPageSettings PageSize="10"></GridPageSettings>
            <GridColumns>
                <GridColumn Field="LocalTimestamp" HeaderText="Date" Format="MM/dd/yyyy hh:mm tt" TextAlign="TextAlign.Center" Width="150" />
                <GridColumn Field="Weight" HeaderText="Weight (lbs)" TextAlign="TextAlign.Center" Width="120" />
                <GridColumn Field="BMI" HeaderText="BMI" Format="N2" TextAlign="TextAlign.Center" Width="100" />
                <GridColumn Field="BodyFatPercentage" HeaderText="Body Fat (%)" Format="N2" TextAlign="TextAlign.Center" Width="120" />
                <GridColumn Field="BodyFatWeight" HeaderText="Body Fat Weight (lbs)" Format="N2" TextAlign="TextAlign.Center" Width="150" />
                <GridColumn Field="LeanMass" HeaderText="Lean Mass (lbs)" Format="N2" TextAlign="TextAlign.Center" Width="150" />
                <GridColumn HeaderText="Actions" TextAlign="TextAlign.Center" Width="150">
                    <Template>
                        <SfButton CssClass="btn btn-danger" OnClick="async () => DeleteLog((WeightLog)context)">Delete</SfButton>
                    </Template>
                </GridColumn>
            </GridColumns>
        </SfGrid>
    </div>

    <!-- Graph section -->
    <div class="mt-5">
        <h4>Weight Tracker Graphs</h4>

        <!-- Weight Graph -->
        <div class="mt-3">
            <SfChart Title="Weight Over Time">
                <ChartPrimaryXAxis Title="Date" ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" LabelFormat="MM/dd/yyyy" IntervalType="Syncfusion.Blazor.Charts.IntervalType.Days" />
                <ChartPrimaryYAxis Title="Weight (lbs)" />
                <ChartTooltipSettings Enable="true" />
                <ChartSeriesCollection>
                    <ChartSeries DataSource="@FilteredLogs" XName="LocalTimestamp" YName="Weight" Type="ChartSeriesType.Spline" Name="Weight" Width="2" Fill="#007bff">
                        <ChartMarker Visible="true" Width="6" Height="6">
                            <ChartDataLabel Visible="true" />
                        </ChartMarker>
                    </ChartSeries>
                </ChartSeriesCollection>
            </SfChart>
        </div>

        <!-- Body Fat Percentage Graph -->
        <div class="mt-3">
            <SfChart Title="Body Fat Percentage Over Time">
                <ChartPrimaryXAxis Title="Date" ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" LabelFormat="MM/dd/yyyy" IntervalType="Syncfusion.Blazor.Charts.IntervalType.Days" />
                <ChartPrimaryYAxis Title="Body Fat (%)" />
                <ChartTooltipSettings Enable="true" />
                <ChartSeriesCollection>
                    <ChartSeries DataSource="@FilteredLogs" XName="LocalTimestamp" YName="BodyFatPercentage" Type="ChartSeriesType.Spline" Name="Body Fat Percentage" Width="2" Fill="#28a745">
                        <ChartMarker Visible="true" Width="6" Height="6">
                            <ChartDataLabel Visible="true" />
                        </ChartMarker>
                    </ChartSeries>
                </ChartSeriesCollection>
            </SfChart>
        </div>

        <!-- Body Composition Graph (Body Fat and Lean Muscle Mass) Graph -->
        <div class="mt-3">
            <SfChart Title="Body Composition Over Time">
                <ChartPrimaryXAxis Title="Date" ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" LabelFormat="MM/dd/yyyy" IntervalType="Syncfusion.Blazor.Charts.IntervalType.Days" />
                <ChartPrimaryYAxis Title="Weight (lbs)" />
                <ChartTooltipSettings Enable="true" />
                <ChartSeriesCollection>
                    <ChartSeries DataSource="@FilteredLogs" XName="LocalTimestamp" YName="BodyFatWeight" Type="ChartSeriesType.Spline" Name="Body Fat Mass" Width="2" Fill="#ff3545">
                        <ChartMarker Visible="true" Width="6" Height="6">
                            <ChartDataLabel Visible="true"/>
                        </ChartMarker>
                    </ChartSeries>
                    <ChartSeries DataSource="@FilteredLogs" XName="LocalTimestamp" YName="LeanMass" Type="ChartSeriesType.Spline" Name="Lean Muscle Mass" Width="2" Fill="#ffbf00">
                        <ChartMarker Visible="true" Width="6" Height="6">
                            <ChartDataLabel Visible="true" />
                        </ChartMarker>
                    </ChartSeries>
                </ChartSeriesCollection>
            </SfChart>
        </div>
    </div>
</div>

@code {
    private SfGrid<WeightLog> Grid;
    private WeightLog CurrentLog { get; set; } = new();         // Represents the current weight log entry
    private List<WeightLog> AllLogs { get; set; } = new();   // List to store multiple weight log entries
    private List<WeightLog> FilteredLogs { get; set; } = new(); // Weight logs filtered by selected range

    // Range filtering options for the graphs
    private List<string> RangeOptions { get; set; } = new() { "Week", "Month", "Quarter", "Year", "All" };

    // Backing field for dropdown
    private string _selectedRange = "All";  // Backing field for the SelectedRange 
    private string SelectedRange
    {
        get => _selectedRange;      // Returns the current selected range
        set
        {
            if (_selectedRange != value) return;
            {
                _selectedRange = value;     // Update the backing field with the new range
                ApplyRangeFilter();
                InvokeAsync(StateHasChanged);
            }
        }
    }

    // The current user's height (retrieved from the main user info)
    private decimal? currentUserHeight;

    // Variables for chart axes (for graphs)
    private Syncfusion.Blazor.Charts.ChartAxis xAxis = new ChartAxis { ValueType = Syncfusion.Blazor.Charts.ValueType.DateTime };
    private Syncfusion.Blazor.Charts.ChartAxis yAxisWeight = new ChartAxis { Title = "Weight (lbs)", Minimum = 0 };
    private Syncfusion.Blazor.Charts.ChartAxis yAxisBodyFat = new ChartAxis { Title = "Body Fat (%)", Minimum = 0, Maximum = 100 };

    protected override async Task OnInitializedAsync()
    {
        // Load user height
        // var profile = dbService.GetUserById(userSessionService.CurrentUserId);
        // currentUserHeight = profile?.Height;

        // Load all logs and apply the default filter
        // AllLogs = dbService.GetMeasurements(userSessionService.CurrentUserId).OrderBy(l => l.Timestamp).ToList();
        // ApplyRangeFilter();

        var userId = userSessionService.CurrentUserId;
        AllLogs = dbService
            .GetMeasurements(userId)
            .OrderBy(l => l.Timestamp)
            .ToList();
        ApplyRangeFilter();
    }

    private void ApplyRangeFilter()
    {
        var cutoff = _selectedRange switch
        {
            "Week" => DateTime.Now.AddDays(-7),
            "Month" => DateTime.Now.AddMonths(-1),
            "Quarter" => DateTime.Now.AddMonths(-3),
            "Year" => DateTime.Now.AddYears(-1),
            _ => DateTime.MinValue
        };

        FilteredLogs = _selectedRange == "All"
            ? AllLogs.ToList()
            : AllLogs
                .Where(l => l.Timestamp >= cutoff)
                .OrderBy(l => l.Timestamp)
                .ToList();

        // Tell Syncfusion to redraw
        _ = Grid?.Refresh();
    }

    // -------------------
    /*
    // Retrieve user profile and full weight logs from the database on first render
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            int userId = userSessionService.CurrentUserId;      // Retrieve the logged-in user's id from the sessionm
            var userProfile = dbService.GetUserById(userId);    // Retrieve the user's profile to get the stored height

            if (userProfile != null)
            {
                currentUserHeight = userProfile.Height;
                }

            // Retrieve weight logs from the database for the current user (using a foreign key relationship)
            WeightLogs = dbService.GetMeasurements(userId).OrderBy(log => log.Timestamp).ToList();  // Load WeightLogs from database
            // FilteredLogs = new List<WeightLog>(WeightLogs);     // Initialize FilteredLogs as a new list that will be reused
            var h = currentUserHeight.HasValue ? Convert.ToDouble(currentUserHeight.Value) : (double?)null;
            foreach (var entry in WeightLogs)
            {
                entry.Height = h;
                }

            StateHasChanged();  // Only call once the first render has completed
            }
        }
    */
    // ---------------------

    /*
    protected override void OnParametersSet()
    {
        UpdateFilteredLogs();
        }
    */
    // Commented out 4/15/25
    // May not be necessary

    // Handler for when the range dropdown changes
    // private async Task OnRangeChanged(string newRange)
    // {
        // selectedRange = newRange;
        // ApplyRangeFilter();
        // StateHasChanged();
    // }

    // Method to log weight data and store it in the database
    // Uses the current user's id (as a foreign key)
    private async Task LogWeight()
    {
        // Insert with Timestamp
        bool success = dbService.AddMeasurement(
            userSessionService.CurrentUserId,
            CurrentLog.Weight,
            CurrentLog.BodyFatPercentage,
            CurrentLog.Timestamp
        );

        if (success)
        {
            // Reload & re-filter
            AllLogs = dbService.GetMeasurements(userSessionService.CurrentUserId)
                .OrderBy(l => l.Timestamp)
                .ToList();
            ApplyRangeFilter();
        }

        CurrentLog = new WeightLog();
    }

    // -----------------------
    /*
    // Filters WeightLogs into FilteredLogs based on the selected time range
    private void UpdateFilteredLogs()
    {
        DateTime cutoffDate = SelectedRange switch
        {
            "Week" => DateTime.Now.AddDays(-7),
            "Month" => DateTime.Now.AddMonths(-1),
            "Quarter" => DateTime.Now.AddMonths(-3),
            "Year" => DateTime.Now.AddYears(-1),
            _ => DateTime.MinValue
        };

        // FilteredLogs.Clear();       // Instead of reassigning FilteredLogs to a new list, update the existing list

        if (selectedRange == "All")
            FilteredLogs.AllLogs.ToList();
        else
            // Add the items that meet the cutoff criteria
            FilteredLogs.AllLogs
                           .Where(log => log.Timestamp >= cutoffDate)
                           .OrderBy(log => log.Timestamp)
                           .ToList();
    }
    // -----------------------
    */

    // Deletes a weight log from the database and refreshes the UI
    private async Task DeleteLog(WeightLog log)
    {
        if (dbService.DeleteMeasurement(log.Id))  
        {
            AllLogs = dbService.GetMeasurements(userSessionService.CurrentUserId).OrderBy(log => log.Timestamp).ToList();

        // var h = currentUserHeight.HasValue ? Convert.ToDouble(currentUserHeight.Value): (double?)null;
            // foreach (var entry in WeightLogs)
            // {
            //   entry.Height = h;
            // }

            ApplyRangeFilter();
        }
    }

    // -------------------------
    // Forces the UI to refresh
    /*
    private async Task RefreshUI()
    {
        await InvokeAsync(StateHasChanged);
    }
    */
}
